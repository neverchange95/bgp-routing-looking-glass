/*
IM_PRJ - Internet Routing Analysis
Copyright (c) 2023 Leitwert GmbH. All rights reserved.
This work is licensed under the terms of the MIT license.
For a copy, see LICENSE.txt in the project root.

@author: Michael KÃ¼chenmeister - Technische Hochschule Ingolstadt (mik6331@thi.de)
@version: 0.3
@date: 10.01.2024

This file contains functions for making various API requests related to available datasets, metadata, and data retrieval.
*/

import { POST, GET } from "./fetch-api";

/**
 * Sends a GET request to fetch available datasets.
 * @returns aviable datasets from database folder in the backend => Foldernames generated by sort_raw_exabgo_data.py.
 */
export const AvialbeDatasetRequest = async () => {
        const requestEndpoint = '/api/data/aviableDatasets';

        const result = await GET(requestEndpoint);

        return result;
}

/**
 * Sends a POST request to fetch metadata based on the provided 'aspathArray'.
 * @param {*} aspathArray - Array of AS numbers (AS-Path) 
 * @returns Country Code for each AS in aspathArray
 */
export const MetaDataRequest = async (aspathArray) => {
    const requestBody = {
        aspath: aspathArray,
    };

    const result = await POST('/api/metadata', requestBody);
    
    return result;
}

/**
 * Sends a POST request to fetch data based on specified parameters.
 * @param {number} pageNumber - Current page number for pagination.
 * @param {number} pageSize - Number of items to fetch per page.
 * @param {string} datasourceFolderPath - Path to the data source.
 * @param {Array} tableFilter - Filter criteria for the table data.
 * @param {string} sessionId - Unique identifier for the user session.
 * @param {boolean} paginationReq - Indicates whether this is a pagination request.
 * @returns data in json
 */
export const DataRequest = async (pageNumber, pageSize, datasourceFolderPath, tableFilter, sessionId, paginationReq) => {
    const requestEndpoint = `/api/data?page_size=${pageSize}&page_number=${pageNumber}`

    console.log(datasourceFolderPath)

    const requestBody = {
        data_source: datasourceFolderPath,
        table_filter: tableFilter,
        uuid: sessionId,
        pagination_req: paginationReq
    };

    const result = await POST(requestEndpoint, requestBody);

    for(let i = 0; i < result.tableData.length; i++) {
        const data = result.tableData[i];

        // Format timestamp in each data element of tableData
        if('timestamp' in data) {
            const date = new Date(data.timestamp * 1000);
            const options = { year: 'numeric', month: 'numeric', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit', timeZone: 'UTC' };

            data.timestamp = date.toLocaleString('de', options);
        }

        // Format AS path from a Array of stings to  a string
        if('aspath' in data) {
            const aspath = data.aspath;
            let separetedAsPathString = "";

            for(const asnum of aspath) {
                separetedAsPathString += asnum + " ";
            }

            data.aspath = separetedAsPathString;
        }

        // Convert length, roa1, aspa1, and aspa2 to strings
        if('length' in data) {
            data.length = data.length.toString()
        }

        if('roa1' in data) {
            data.roa1 = data.roa1.toString()
        }

        if('aspa1' in data) {
            data.aspa1 = data.aspa1.toString()
        }

        if('aspa2' in data) {
            data.aspa2 = data.aspa2.toString()
        }
    }

    return result;
}